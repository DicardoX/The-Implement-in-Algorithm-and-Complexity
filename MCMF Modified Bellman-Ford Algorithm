#include <iostream>
#include <fstream>
#include <vector>

using namespace std;
const int maxn = 10007;
const int maxCost = 100000007;

struct Edge{
    int end, capacity, cost;
    explicit Edge(int e = 0, int c = 0, int c2 = 0):end(e), capacity(c), cost(c2){}
};
vector<Edge> map[maxn];     // map[i] contains all edges that start from node_i
vector<Edge> reverse_map[maxn];   // reverse graph
bool visited[maxn];
int tmp_path[maxn], Index;
int n, m, s, t;
int flow, flow_cost, pre_flowCost;
int cap;                    // bottleneck capacity
int min_cost;               // Min_cost in the shortest path
int total_minCost;
int path[maxn], amount;     // Shortest path record, amount of edges in this path
bool reach_end;

int bottleneck_capacity()
{
    int start, end;
    int min = 10000007;
    //cout << "Path record is: ";
    //for(int i=1; i<=amount; i++)
        //cout << path[i] << ' ';
    //cout << endl;
    for(int i=1; i<=amount-1; i++)
    {
        start = path[i];
        end = path[i+1];
        for(vector<Edge>::iterator itr = reverse_map[start].begin(); itr != reverse_map[start].end(); itr++)
        {
            if((*itr).end == end && (*itr).capacity < min){
                min = (*itr).capacity;
            }
        }
    }
    if(min < 0) {
        cout << "negative cap!" << endl;
        exit(0);
    }
    return min;
}

void DFS(int node, int cost){

    //cout << "DFS returned with max flow = " << flow << " and minimum cost = " << flow_cost << ' ' << node << endl;
    //cout << "current cost = " << cost << " current min cost = " << min_cost << endl;
    if(map[node].empty())
        return;
    for(vector<Edge>::iterator itr = reverse_map[node].begin(); itr != reverse_map[node].end(); itr++)
    {
        if((*itr).capacity == 0) {        // This edge has been totally reversed
            //cout << "End: " << (*itr).end << " is" << (*itr).capacity << endl;
            continue;
        }
        int next = (*itr).end;

        if(!visited[next]){
            tmp_path[Index++] = next;
            if(next == t){
                reach_end = true;
                Index--;
                if(cost + (*itr).cost < min_cost) {
                    for(int i=1; i<=Index; i++)
                        path[i] = tmp_path[i];
                    amount = Index;
                    cap = bottleneck_capacity();
                    min_cost = cost + (*itr).cost;
                    total_minCost = min_cost * cap;
                }
                //cout << "t found! " << min_cost << ' ' <<cap << endl;
                //exit(0);
                continue;
            }
            visited[next] = true;
            DFS(next, cost + (*itr).cost);
            visited[next] = false;
            Index--;
        }
        //cout << "From " << node << " to " << next << " has returned! " << endl;
    }
}

int getCost(int start, int end)
{
    for(vector<Edge>::iterator itr = map[start].begin(); itr != map[start].end(); itr++){
        if((*itr).end == end)
            return (*itr).cost;
    }
    cout << "No Corresponding edge from " << start << " to " << end <<" !" << endl;
    exit(0);
}

void update_reverseGraph()
{
    //cout << "Max flow: " << flow << " Min cost: " << flow_cost << endl;
    int start, end;
    //cap = bottleneck_capacity();        // Get the bottleneck capacity of this path
    //if(cap == 0)
        //return;
    //cout << "bottleneck cap = " << cap << endl;
    for(int i=1; i<=amount-1; i++)
    {
        start = path[i];
        end = path[i+1];
        for(vector<Edge>::iterator itr = reverse_map[start].begin(); itr != reverse_map[start].end(); itr++)
        {
            if((*itr).end == end){
                if((*itr).capacity < cap){
                    cout << "Error occurs when updating the capacity of the edge! throughput: " << cap << " capacity: " << (*itr).capacity <<  endl;
                    //exit(0);
                }
                (*itr).capacity -= cap;     // Update the capacity of the edge
                //cout << "Updated " << (*itr).end << " to " << (*itr).capacity << endl;
            }
        }
    }
    for(int i=amount; i>1; i--)
    {
        start = path[i];
        end = path[i-1];
        bool edge_exited = false;
        for(vector<Edge>::iterator itr = reverse_map[start].begin(); itr != reverse_map[start].end(); itr++)
        {
            if((*itr).end == end){
                edge_exited = true;
                (*itr).capacity += cap;     // If existed, update the capacity of the reverse edge
            }
        }
        if(!edge_exited)
        {
            reverse_map[start].push_back(Edge(end, cap, -getCost(end, start)));     // If not existed, add a new reverse edge
        }
    }
    /*for(int i=1; i<=n; i++){
        for(vector<Edge>::iterator itr = reverse_map[i].begin(); itr != reverse_map[i].end(); itr++)
            cout << (*itr).end << " cap is: " << (*itr).capacity << ' ';
        cout << endl;
    }*/
}

void find_shortestPath()
{
    min_cost = maxCost;
    Index = 1;
    for(int i=1; i<=maxn; i++)
        visited[i] = false;
    tmp_path[Index++] = s;
    visited[s] = true;
    DFS(s, 0);
    //cout << "DFS doesn't have infinite loop!" << endl;
    //cout << ' ' << min_cost << endl;
    cout << "DFS finished!" << endl;
    if(reach_end)
    {
        pre_flowCost = flow_cost;               // Update the previous flow cost
        flow_cost += total_minCost;                  // Update the minimum cost of the flow
        flow += cap;                            // Update the flow
        update_reverseGraph();                  // Update reverse graph
    }
}


int main() {
    ifstream fin;
    ofstream fout;
    fin.open("MCMF.in");
    fin >> n >> m >> s >> t;
    flow = flow_cost = 0;
    pre_flowCost = 1;                       // Just different from flow_cost
    int tmp1, tmp2, tmp3, tmp4;
    for(int i=1; i<=m; i++){
        fin >> tmp1 >> tmp2 >> tmp3 >> tmp4;
        map[tmp1].push_back(Edge(tmp2, tmp3, tmp4));
        reverse_map[tmp1].push_back(Edge(tmp2, tmp3, tmp4));
    }

    /*for(int i=1; i<=n; i++)
    {
        cout << "Path " << i << ": ";
        for(vector<Edge>::iterator itr = map[i].begin(); itr != map[i].end(); itr++)
            cout << (*itr).end << ' ';
        cout << endl;
    }*/

    reach_end = true;
    int count = 0;
    while(reach_end)
    {
        reach_end = false;
        find_shortestPath();
        cout << "Iteration " << count++ << endl;
        //cout << "pre_flowcost: " << pre_flowCost <<" flowcost: " << flow_cost << endl;

    }
    cout << "Maximum flow: " << flow << endl;
    cout << "Minimum cost: " << flow_cost << endl;

    return 0;
}

#include <iostream>
#include <fstream>
#include <vector>

using namespace std;
const int maxn = 10007;
const int inf = 100000007;

struct Edge{
    int end, capacity, cost;
    explicit Edge(int e = 0, int c = 0, int c2 = 0):end(e), capacity(c), cost(c2){}
};
vector<Edge> map[maxn];     // map[i] contains all edges that start from node_i
vector<Edge> reverse_map[maxn];   // reverse graph
int tmp_path[maxn];
int n, m, s, t;
int flow, flow_cost;
int cap;                    // bottleneck capacity
int total_minCost;
int path[maxn];     // Shortest path record, amount of edges in this path
bool reach_end;
int dist[maxn];
int pre_node[maxn];
bool ischanged;

int bottleneck_capacity(int amount)
{
    int start, end;
    int min = 10000007;

    for(int i=1; i<=amount-1; i++)
    {
        start = path[i];
        end = path[i+1];
        for(vector<Edge>::iterator itr = reverse_map[start].begin(); itr != reverse_map[start].end(); itr++)
        {
            if((*itr).end == end && (*itr).capacity < min){
                min = (*itr).capacity;
            }
        }
    }
    if(min < 0) {
        cout << "negative cap!" << endl;
        exit(0);
    }
    return min;
}

void Bellman_ford(int &idx){
    for(int i=1; i<=n; i++){
        dist[i] = inf;
        pre_node[i] = 0;
    }
    dist[s] = 0;
    for(int i=1; i<=n-1; i++)
    {
        ischanged = false;
        for(int j=1; j<=n; j++)
        {
            if(dist[j] != inf)
                for(vector<Edge>::iterator itr = reverse_map[j].begin(); itr != reverse_map[j].end(); itr++)
                {
                    if((dist[(*itr).end] > dist[j] + (*itr).cost) && (*itr).capacity > 0){
                        dist[(*itr).end] = dist[j] + (*itr).cost;
                        pre_node[(*itr).end] = j;
                        ischanged = true;
                    }
                }
        }
        if(!ischanged)
            break;
    }

    if(dist[t] == inf)
        reach_end = false;
    else
        reach_end = true;

    int node = t;
    tmp_path[idx++] = t;
    while(node != s){
        node = pre_node[node];
        tmp_path[idx++] = node;
    }
    idx--;
    for(int i=1; i<=idx; i++){
        path[i] = tmp_path[idx-i+1];
    }
    cap = bottleneck_capacity(idx);
    total_minCost = dist[t] * cap;
}

int getCost(int start, int end)
{
    for(vector<Edge>::iterator itr = map[start].begin(); itr != map[start].end(); itr++){
        if((*itr).end == end)
            return (*itr).cost;
    }
    cout << "No Corresponding edge from " << start << " to " << end <<" !" << endl;
    exit(0);
}

void update_reverseGraph(int amount)
{
    int start, end;
    for(int i=1; i<=amount-1; i++){
        start = path[i];
        end = path[i+1];
        for(vector<Edge>::iterator itr = reverse_map[start].begin(); itr != reverse_map[start].end(); itr++){
            if((*itr).end == end){
                if((*itr).capacity < cap){
                    cout << "Error occurs when updating the capacity of the edge! throughput: " << cap << " capacity: " << (*itr).capacity <<  endl;
                    exit(0);
                }
                (*itr).capacity -= cap;     // Update the capacity of the edge
            }
        }
    }
    for(int i=amount; i>1; i--)
    {
        start = path[i];
        end = path[i-1];
        bool edge_exited = false;
        for(vector<Edge>::iterator itr = reverse_map[start].begin(); itr != reverse_map[start].end(); itr++){
            if((*itr).end == end){
                edge_exited = true;
                (*itr).capacity += cap;     // If existed, update the capacity of the reverse edge
            }
        }
        if(!edge_exited){
            reverse_map[start].push_back(Edge(end, cap, -getCost(end, start)));     // If not existed, add a new reverse edge
        }
    }
}

void find_shortestPath()
{
    int idx = 1;
    Bellman_ford(idx);

    if(reach_end)
    {
        flow_cost += total_minCost;                  // Update the minimum cost of the flow
        flow += cap;                            // Update the flow
        update_reverseGraph(idx);                  // Update reverse graph
    }
}


int main() {
    ifstream fin;
    ofstream fout;
    fin.open("MCMF.in");
    fin >> n >> m >> s >> t;
    flow = flow_cost = 0;
    int tmp1, tmp2, tmp3, tmp4;
    for(int i=1; i<=m; i++){
        fin >> tmp1 >> tmp2 >> tmp3 >> tmp4;
        map[tmp1].push_back(Edge(tmp2, tmp3, tmp4));
        reverse_map[tmp1].push_back(Edge(tmp2, tmp3, tmp4));
    }

    reach_end = true;
    int count = 0;
    while(reach_end)
    {
        reach_end = false;
        find_shortestPath();
        cout << "Iteration " << count++ << endl;
        //cout << "pre_flowcost: " << pre_flowCost <<" flowcost: " << flow_cost << endl;
    }
    cout << "Maximum flow: " << flow << endl;
    cout << "Minimum cost: " << flow_cost << endl;

    return 0;
}
